# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
- master
pool:
  vmImage: ubuntu-latest

variables:
- name: VCPKG_ROOT
  value: /usr/local/share/pxmc3000/vcpkg
- name: SMPDATAAGENT_ROOT
  value: /usr/local/share/pxmc3000/SmpDataAgent
- name: PXMC_ROOT
  value: /usr/local/share/pxmc3000
- name: SOURCE_ROOT
  value: /usr/local/share/pxmc3000/source
- name: DETECT_PROJECT_NAME = PXMC-EA
steps:
- task: DownloadSecureFile@1 
  name: EatonCertificate
  inputs:
    secureFile: 'Eaton_root_ca_2.crt'
  displayName: 'Get Eaton Certificate'
- script: |
    sudo cp $(EatonCertificate.secureFilePath) /usr/local/share/ca-certificates
    sudo update-ca-certificates
  displayName: 'Install Eaton Certificate'
- script: |
    # Activate command tracing
    set -o xtrace
    # Install LXC if not installed
    if [[ ! $(sudo dpkg-query -W -f='${package}\n' lxc 2>/dev/null) ]]; then
      sudo apt update
      sudo apt install lxc -y
    fi
    # Create the Build Container - Destroy if exists
    if [[ $(sudo lxc-info -n SmpBuildApplication 2>/dev/null) ]]; then 
      if [[ $(sudo lxc-info SmpBuildApplication -s -H) == "RUNNING" ]]; then 
        sudo lxc-stop SmpBuildApplication
      fi
      sudo lxc-destroy SmpBuildApplication
    fi
    # Release key Issue work-arround : Download and load trusted key
    sudo lxc-create -n SmpBuildApplication -t download -- -d debian -r bullseye -a amd64
    if [[ $(sudo lxc-info SmpBuildApplication -s -H) != "RUNNING" ]]; then 
      sudo lxc-start SmpBuildApplication
    fi
    # Waiting for the network configuration
    WaitingIpRetries=10
    WaitingIpSleepDelay=3
    WaitingIpIterator=1
    while [ $WaitingIpIterator -lt $WaitingIpRetries ]
    do
      if [[ ! $(sudo lxc-info SmpBuildApplication -i -H) ]]; then
        echo "Ip adress not yet assigned, retry number " $WaitingIpIterator
        sleep $WaitingIpSleepDelay
      else
        echo "IP assigned successfully : " $(sudo lxc-info SmpBuildApplication -i -H)
        WaitingIpIterator=$WaitingIpRetries
      fi
      WaitingIpIterator=$((WaitingIpIterator+1))
    done
  displayName: 'Create Build Container'
- script: |
    sudo lxc-attach -n SmpBuildApplication -- bash -c '
      # Activate command tracing
      set -o xtrace
      # Create directories
      if [ ! -d $(VCPKG_ROOT) ]; then 
        install -D -d -o $(whoami) -g $(id -Gn) $(VCPKG_ROOT)
      fi
      if [ ! -d $(SMPDATAAGENT_ROOT) ]; then 
        install -D -d -o $(whoami) -g $(id -Gn) $(SMPDATAAGENT_ROOT)
      fi
      if [ ! -d $(SOURCE_ROOT) ]; then 
        install -D -d -o $(whoami) -g $(id -Gn) $(SOURCE_ROOT)
      fi'
    # Copy source
    set -o xtrace
    sudo cp -R $(Build.SourcesDirectory)/*  /proc/$(sudo lxc-info -n SmpBuildApplication -p -H)/root/usr/local/share/pxmc3000/source
  displayName: 'Create Diretories & Copy source to the container'
- script: |
    sudo lxc-attach -n SmpBuildApplication -- bash -c '
      # Activate command tracing
      set -o xtrace
      echo installing packages with apt ...
      apt update -y
      apt upgrade -y
      # Required for build
      apt install -y ninja-build libcurl4-openssl-dev git
      # Required for VCPKG & Cmake
      apt install -y curl zip unzip tar build-essential pkg-config libssl-dev
      # Install Cmake version 3.24.2 since the last version of apt is 3.18 (doesn t support preset)
      cd $(SOURCE_ROOT)
      curl -OL https://github.com/Kitware/CMake/releases/download/v3.24.2/cmake-3.24.2-linux-x86_64.tar.gz
      tar -zxvf cmake-3.24.2-linux-x86_64.tar.gz
      cd cmake-3.24.2-linux-x86_64
      ln /usr/local/share/pxmc3000/source/cmake-3.24.2-linux-x86_64/bin/cmake /usr/bin/cmake'
  displayName: 'Install required package - apt'
- script: |
    sudo lxc-attach -n SmpBuildApplication -- bash -c '
      # Activate command tracing
      set -o xtrace
      cd $(PXMC_ROOT)
      # TODO : Add the copy certificate to the container and set git to use it
      git clone https://github.com/Microsoft/vcpkg
      cd vcpkg
      ./bootstrap-vcpkg.sh -disableMetrics
      ./vcpkg @$(SOURCE_ROOT)/SmpDataAgent/vcpkg_ref.txt --vcpkg-root $(VCPKG_ROOT)
      #./vcpkg integrate install --vcpkg-root $(VCPKG_ROOT)'
  displayName: 'Prepare the environment & VCPKG packages'
- script: |
    sudo lxc-attach -n SmpBuildApplication -- bash -c '
      set -o xtrace
      cmake --preset linux-debug -DCMAKE_TOOLCHAIN_FILE:FILEPATH="/usr/local/share/pxmc3000/vcpkg/scripts/buildsystems/vcpkg.cmake" /usr/local/share/pxmc3000/source
      cmake --build /usr/local/share/pxmc3000/SmpDataAgent/bin/linux-debug --config Release'
  displayName: 'Cmake build'
- script: |
      # Activate command tracing
      set -o xtrace
      cp /proc/$(sudo lxc-info -n SmpBuildApplication -p -H)/root/usr/local/share/pxmc3000/SmpDataAgent/bin/linux-debug/SmpDataAgent/SmpDataAgent /usr/local/share/pxmc3000/azBuildAgent/_work/1/a/SmpDataAgent
      if [[ $(sudo lxc-info SmpBuildApplication -s -H) == "RUNNING" ]]; then 
        lxc-stop SmpBuildApplication
      fi
      lxc-destroy SmpBuildApplication
  displayName: 'Copy binaries & Destroy the container'
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'SmpDataAgent'
    publishLocation: 'Container'
  displayName: 'Publish Binarie'