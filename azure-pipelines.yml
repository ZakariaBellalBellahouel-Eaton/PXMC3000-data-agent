# Starter pipeline

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: ubuntu-latest

steps:
- script: |
    ls -ll /usr/local/share/ /usr/local/share
    ls -ll /home/vsts/work/1/s /home/vsts/work/1/s/vcpkg
    git clone https://github.com/Microsoft/vcpkg
    cd vcpkg
    ./bootstrap-vcpkg.sh
    ./vcpkg integrate install
    ./vcpkg @../SmpHttpClient/vcpkg_ref.txt
  displayName: 'Prepare VCPKG packages'
- script: |
    echo Step 1: installing packages with apt ...
    sudo apt install -y ninja-build cmake libcurl4-openssl-dev
    #echo Step 2: Creating the directories ...
    #sudo mkdir /usr/local/share/SmpHttpClient /usr/local/share/SmpHttpClient/bin /usr/local/share/SmpHttpClient/install
    echo Step 3: Settings permission for the new directories ...
    #sudo chown -R vsts:docker /usr/local/share/SmpHttpClient
    #ls -ll /usr/local/share/ /usr/local/share/SmpHttpClient
    #ls -ll /usr/lib/x86_64-linux-gnu/
  displayName: 'Create Directories & Install required package - apt'
- script: |
    sudo cmake /home/vsts/work/1/s/  --preset linux-debug -DCMAKE_TOOLCHAIN_FILE:FILEPATH="/usr/local/share/vcpkg/scripts/buildsystems/vcpkg.cmake"
    sudo cmake --build /usr/local/share/SmpHttpClient/bin/linux-debug --config Release
  displayName: 'Cmake build'
- script: |
    sudo cp /usr/local/share/SmpHttpClient/bin/linux-debug/SmpHttpClient/SmpHttpClient /home/vsts/work/1/a/SmpHttpClient
  displayName: 'Copy binaries'
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'SmpDeviceAgent'
    publishLocation: 'Container'
  displayName: 'Publish Binarie'

